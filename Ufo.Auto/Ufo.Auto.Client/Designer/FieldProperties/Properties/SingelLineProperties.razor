@using SqlSugar
@using global::Models

@*@inherits PropertiesComponentBase*@
@*<div class="prop-group-box" style="min-height:80vh">*@
@* <div style="min-height:80vh"> *@
@*<div class="box-header">Defaults(默认通用属性)</div>*@

<div class="properties">
<Collapse OnCollapseChanged="OnCollapseChanged">
   
    <CollapseItems >
        <CollapseItem Text="通用属性" >
            <AntDesign.Text>Id</AntDesign.Text>
            <AntDesign.Input @bind-Value="ComponentData.Id" Placeholder="Id" ReadOnly="true"></AntDesign.Input>
            <AntDesign.Text>名称</AntDesign.Text>
            <AntDesign.Input @bind-Value="ComponentData.Name" TValue="string" Placeholder="名称" OnChange="OnChangeString"></AntDesign.Input>
            <AntDesign.Text>宽:</AntDesign.Text>
            <br />
            <AntDesign.InputNumber TValue="int" Step="1" Min="1" Max="12" @bind-Value="ComponentData.Width" OnChange="OnChange" />
            <br />
            <AntDesign.Text>高:(默认自动)</AntDesign.Text>
            <br />
            <AntDesign.InputNumber TValue="int" Step="10" Min="0" @bind-Value="ComponentData.Height" OnChange="OnChange" />
            <br />
            
        </CollapseItem>
        <CollapseItem Text="扩展属性">
             <AntDesign.Text>大小:</AntDesign.Text>
             <AntDesign.RadioGroup @bind-Value="@ComponentData.Props["Size"].StringValue" TValue="string" OnChange="OnChange" Options="@SizeOptions"></AntDesign.RadioGroup>
             <br />
             <AntDesign.Text>只读:</AntDesign.Text>
             <AntDesign.Switch @bind-Value="@ComponentData.Props["ReadOnly"].BoolVal" OnChange="OnChange"></AntDesign.Switch>

        </CollapseItem>
        <CollapseItem Text="事件和数据源">
                <CheckboxList IsButton="true" TValue="IEnumerable<string>" Items="@BoxListData" @bind-Value="@ComponentData.Props["Params"].StringListValue" ShowLabel="true" DisplayText="存储过程需要的参数" />
                @* <TreeView TItem="TreeComponentData" Items="@treeData" ShowCheckbox="true" ClickToggleNode="true" /> *@
                @*   <AntDesign.TreeSelect TItem="TreeComponentData"
                Style="width:100%;"
                DataSource="treeData"
                OnSelectedItemsChanged="OnChangeTreeSelects"
                @bind-Values="@ComponentData.Props["Params"].StringListValue"
                Placeholder="Please select"
                Multiple
                TreeDefaultExpandAll
                ChildrenExpression="node=>node.DataItem.Children"
                TitleExpression="node=>node.DataItem.Title"
                KeyExpression="x=>x.DataItem.Key">
                </AntDesign.TreeSelect> *@
                <Button OnClick="()=>{BoxListData=new (); FormDesigner.FunctionPage.ContainerData.ToSelectedItemList(BoxListData);}">刷新</Button>

        </CollapseItem>
    </CollapseItems>
</Collapse>
</div>



@code {
    private string value;
    [NotNull]
    private Modal? Modal { get; set; }
    AntDesign.RadioOption<string>[] SizeOptions = new AntDesign.RadioOption<string>[]
    {
        new(){ Value = "large", Label="大", },
        new(){ Value = "default", Label="中", },
        new(){ Value = "small", Label="小", },
    };
    [CascadingParameter(Name = "Root")]
    [NotNull]
    public FormDesigner? FormDesigner { get; set; }

    [Parameter]
    [NotNull]
    public ComponentDto? ComponentData { get; set; }

    [NotNull]
    private ValidateForm? ValidateForm { get; set; }
    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    [Inject]
    [NotNull]
    private ISqlSugarClient? db { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnLabelChanged { get; set; }
    [Parameter]
    public EventCallback<ChangeEventArgs> OnWidthChanged { get; set; }
    [Parameter]
    public EventCallback<ChangeEventArgs> OnHeightChanged { get; set; }
    [Parameter]
    public EventCallback<PInof> OnPropChanged { get; set; }
    /// <summary>
    /// Primary / Secondary / Success / Danger / Warning / Info / Dark
    /// </summary>
    // List<SelectedItem> ColorItems = new List<SelectedItem>() {
    //             new SelectedItem("None", "None"),
    //             new SelectedItem("Active", "Active"),
    //             new SelectedItem("Primary", "Primary"),
    //             new SelectedItem("Warning", "Warning"),
    //             new SelectedItem("Info", "Info"),
    //             new SelectedItem("Danger", "Danger"),
    //             new SelectedItem("Success", "Success"),
    //             new SelectedItem("Dark", "Dark")
    //             };
    // List<SelectedItem> BoolItems = new List<SelectedItem>() {
    //             new SelectedItem("True", "True"),
    //             new SelectedItem("False", "False"),

    //             };
    // private SelectedItem? VirtualItem1 { get; set; }
    private async Task<QueryData<SelectedItem>> OnQueryAsync(VirtualizeQueryOption option)
    {
        await Task.Delay(200);
        return new QueryData<SelectedItem>
            {
                Items = new List<SelectedItem>()
                        {
                    new SelectedItem("北京", "北京"),
                    new SelectedItem("上海", "上海") { Active = true },
                },
                TotalCount = 2
            };
    }
    // public List<SelectedItem> Parameters { get; set; } = new List<SelectedItem>() { new SelectedItem() { Value = "1", Text = "22" }, new SelectedItem() { Value = "2", Text = "22" } };
    // public List<ContainerDto> Containers;
    List<TreeViewItem<TreeComponentData>>? treeData; 
    List<SelectedItem>? BoxListData;
    protected override Task OnInitializedAsync()
    {
        //         treeData = new List<TreeComponentData>() { new TreeComponentData()
        //         {
        //             Type= ControlType.Comtainer,
        //             Key=FormDesigner.ContainerData.Id,
        //             Title=FormDesigner.ContainerData.Name,
        //             Children=new List<TreeComponentData>()
        // } };
        treeData = new List<TreeViewItem<TreeComponentData>>();
        BoxListData = new();
        FormDesigner.FunctionPage.ContainerData.ToTree(treeData);
        FormDesigner.FunctionPage.ContainerData.ToSelectedItemList(BoxListData);
        // Parameters = FormDesigner.ContainerData.FindAllComponent().Select(x => new SelectedItem() { Text = "   " + x.ParentId + x.Id, Value = x.Id }).ToList();
        // Containers = FormDesigner.ContainerData.FindAllContainer();
        return base.OnInitializedAsync();
    }
    public async Task OnCollapseChanged(CollapseItem e)
    {
        if (e.Text == "事件和数据源" && e.IsCollapsed == false)
        {
            BoxListData = new();
            FormDesigner.FunctionPage.ContainerData.ToSelectedItemList(BoxListData);
            await   FormDesigner.StateHasChangedAsync();
        }
    }
    public Task OnNodeLoadDelayAsync(AntDesign.TreeEventArgs<TreeComponentData> args)
    {
        var dataItem = args.Node.DataItem;
        // if (dataItem.Children==null)
        // {
        //     return Task.CompletedTask;
        // }
        switch (dataItem.Type)
        {
            case ControlType.Comtainer:
                ContainerDto? res = null;
                FormDesigner.FunctionPage.ContainerData.FindContainer(x => x.Id == dataItem.Key, ref res);
                if (res != null)
                {
                    var node = (List<TreeComponentData>)dataItem.Children;
                    node.Clear();
                    foreach (var row in res.Rows)
                    {
                        node.Add(new TreeComponentData()
                            {
                                Type = ControlType.Row,
                                Key = row.Id,
                                Title = row.Name
                            });
                    }
                }

                break;
            case ControlType.Row:
                RowDto? resrow = null;
                FormDesigner.FunctionPage.ContainerData.FindRow(x => x.Id == dataItem.Key, ref resrow);
                if (resrow != null)
                {
                    var node = (List<TreeComponentData>)dataItem.Children;
                    node.Clear();
                    foreach (var com in resrow.ComponentList)
                    {
                        node.Add(new TreeComponentData()
                            {
                                Type = ControlType.Component,
                                Key = com.Id,
                                Title = com.Name
                            });
                    }
                }
                break;
            case ControlType.Component:
                ComponentDto? resrom = null;
                FormDesigner.FunctionPage.ContainerData.FindComponent(x => x.Id == dataItem.Key, ref resrom);
                if (resrom != null)
                {
                    var node = (List<TreeComponentData>)dataItem.Children;
                    node.Clear();
                    foreach (var com in resrom.ChildContainers)
                    {
                        node.Add(new TreeComponentData()
                            {
                                Type = ControlType.Comtainer,
                                Key = com.Id,
                                Title = com.Name
                            });
                    }
                }
                break;
            default:
                break;
        }
        return Task.CompletedTask;
    }
    private IEnumerable<SelectedItem> GetParameters()
    {
        return FormDesigner.FunctionPage.ContainerData.FindAllComponent().Select(x => new SelectedItem() { Text = "   " + x.Id, Value = x.Id });

    }
    private IEnumerable<SelectedItem> GetProList()
    {
        return db.DbMaintenance.GetProcList("LCM").Select(x => new SelectedItem() { Text = x, Value = x });
    }
    public void OnValueChanged(MouseEventArgs e)
    {

        //Color.Dark
    }
    public void OnFieldValueChanged(string key, object value)
    {//lstNames.GroupBy(n => n).Any(c => c.Count() > 1);
        if (key == "Id")
        {

            if (FormDesigner.FunctionPage.ContainerData.FindAllComponent(x => true).GroupBy(x => x.Id).Any(x => x.Count() > 0))
            {
                ValidateForm.SetError("Id", "数据库中已存在");
            }

        }
        //return Task.CompletedTask;
    }
    private Task OnValidComplexModel(EditContext context)
    {
        ValidateForm.SetError("Id", "数据库中已存在");
        return Task.CompletedTask;
    }
    /// <summary>
    /// 当设置控件的Id属性的时候
    /// </summary>
    /// <param name="v"></param>
    /// <returns></returns>
    public Task IdOnValueChanged(string v)
    {

        if (FormDesigner.FunctionPage.ContainerData.FindAllComponent(x => true).GroupBy(x => x.Id).Any(x => x.Count() > 1))
        {
            ComponentData.Id = "";
        }
        return Task.CompletedTask;
    }
    /// <summary>
    /// 仅仅是手动触发界面刷新
    /// </summary>
    /// <param name="v"></param>
    /// <returns></returns>
    public async Task OnValueChangedForBool(bool v)
    {
        await FormDesigner.StateHasChangedAsync();
    }
    /// <summary>
    /// 当设置控件外观颜色的时候
    /// </summary>
    /// <param name="v"></param>
    /// <returns></returns>
    public async Task OnValueChangedForColor(Color v)
    {
        await FormDesigner.StateHasChangedAsync();
    }
    /// <summary>
    /// 仅仅是手动触发界面刷新
    /// </summary>
    /// <param name="v"></param>
    /// <returns></returns>
    public async Task OnValueChangedForInt(int v)
    {
        await FormDesigner.StateHasChangedAsync();
    }
    /// <summary>
    /// 刷新主界面
    /// </summary>
    /// <param name="v"></param>
    /// <returns></returns>
    public async Task OnValueChangedForString(string v)
    {
        await FormDesigner.StateHasChangedAsync();
    }
    public async Task OnChangeString(string a)
    {
        await FormDesigner.StateHasChangedAsync();
    }
    public async Task OnChange()//OnChangeTreeSelects
    {
        await FormDesigner.StateHasChangedAsync();
    }
    public async Task OnChangeTreeSelects(IEnumerable<TreeComponentData> list)//OnChangeTreeSelects
    {
        var ss = FormDesigner.FunctionPage.ContainerData;
        await FormDesigner.StateHasChangedAsync();
    }
}
