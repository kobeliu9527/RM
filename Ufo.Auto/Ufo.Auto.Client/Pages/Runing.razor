@page "/runing/{id}"
@* @attribute [StreamRendering] *@
@* @rendermode InteractiveAuto *@
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Text.Unicode
@using System.Collections.Concurrent
@using Ufo.Auto.Client.Layout
<PageTitle>运行时候</PageTitle>
<div class="rmain">
    <div class="rmain-main">
        @if (FunctionPage != null)
        {
            <div class="container-content">
                <CascadingValue Value="StateHasChangedOnContainer">
                    <CascadingValue Value="FunctionPage.ContainerData" Name="RootContainer">
                        <ContainerRuning ContainerData="FunctionPage.ContainerData" />
                    </CascadingValue>
                </CascadingValue>
            </div>
            <div class="container-msg">
                @switch (FunctionPage.ShowMsgType)
                {
                    case ShowMsgType.None:
                        break;
                    case ShowMsgType.Console:
                        <Console ShowLight="false" Items="ColorMessages" HeaderText="消息"></Console>
                        break;
                    case ShowMsgType.ConsoleBox:
                        @* <ConsoleLogger @ref="NormalLogger" class="mt-3" /> *@
                        break;
                    case ShowMsgType.Toast:
                        break;
                    case ShowMsgType.SweetAlert:
                        break;
                    default:
                        break;
                }
            </div>
        }
        else
        {
            <div>
                等待中.....
            </div>
        }
    </div>
</div>
@code {
    [Parameter]
    public EventCallback StateHasChangedOnContainer { get; set; }
    private ConcurrentQueue<ConsoleMessageItem> ColorMessages { get; set; } = new();
    [Parameter]
    public string? Id { get; set; }
    [NotNull]
    public FunctionPage? FunctionPage { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var id = Id;
        ColorMessages.Enqueue(new ConsoleMessageItem() { Message = "asf" });
        ColorMessages.Enqueue(new ConsoleMessageItem() { Message = "asf" });
        ColorMessages.Enqueue(new ConsoleMessageItem() { Message = "asf" });
        await Task.Delay(1000);
        FunctionPage = new FunctionPage()
            {
                ShowMsgType = ShowMsgType.Console,
                ContainerData = new ContainerDto() { }
            };
    }
    /// <summary>
    /// 刷新整个页面
    /// </summary>
    /// <returns></returns>
    public async Task StateHasChangedAsync()
    {
        StateHasChanged();
        await Task.CompletedTask;
    }
}
