@switch (ComponentDto.ComponentType)
{
    case ComponentType.Container:
        ClassString = "container";
        break;
    case ComponentType.Row:
        ClassString = "row row-builder";
        break;
    case ComponentType.TabControl:
        break;
    case ComponentType.Button:
        break;
    case ComponentType.TextBox:
        break;
    case ComponentType.DataGridView:
        break;
    default:
        break;
}

<div class="@ClassString @ComponentDto.FlexInfo.ColCount @ComponentDto.Name" @ref="obj"
     style="position:@ComponentDto.Position.ToString().ToLower();"
     ondragover="event.preventDefault();"
     ondragenter="event.preventDefault();"
     ondragleave="event.preventDefault();"
@ondrop:preventDefault
@ondrop:stopPropagation
     @ondrop="OnDrop">
    @switch (ComponentDto.ComponentType)
    {
        case ComponentType.Container:
            <ExContainer ComponentDto="ComponentDto"></ExContainer>
            break;
        case ComponentType.Row:
            <ExPanel ComponentDto="ComponentDto"></ExPanel>
            break;
        case ComponentType.Button://
            <ExButton ComponentDto="ComponentDto"></ExButton>
            break;
        default:
            <input type="text" id="@Guid.NewGuid()" />
            break;
    }


</div>
@code {
    private ElementReference obj;
    private string ClassString { get; set; } = "";
    /// <summary>
    /// 本身
    /// </summary>
    [Parameter]
    [NotNull]
    public ComponentDto? ComponentDto { get; set; }
    /// <summary>
    /// 跟容器
    /// </summary>
    [Parameter]
    [NotNull]
    [CascadingParameter(Name = "Root")]
    public ComponentDto? Progenitor { get; set; }
    /// <summary>
    /// 父级容器
    /// </summary>
    [Parameter]
    [NotNull]
    public ComponentDto? Parent { get; set; }

    [Parameter]
    [NotNull]
    public EventCallback<MouseEventArgs> MainStateHasChanged { get; set; }
    void OnDrop(DragEventArgs e)
    {

        var ind = Parent.Child.IndexOf(ComponentDto);
        Parent.Child.Insert(ind, new ComponentDto() { ComponentType = ComponentType.Button });
        Progenitor.MainStateHasChanged?.Invoke();
    }
}
