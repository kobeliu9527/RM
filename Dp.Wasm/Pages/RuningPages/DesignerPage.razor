@page "/designer/{id:long}"
@using Dp.Wasm.IServices
@using Microsoft.JSInterop
@inject IBigScreenService BigScreenService
<CascadingValue Value="this.BigScreens">
    <CascadingValue Value="this.BigScreenDesigner">
        <div style="height:5%;display:flex;justify-content: flex-start; ">
            <div style="flex:2;display:flex">
                <Switch OnColor="Color.Primary" ShowInnerText="true" DisplayText="菜单栏" @bind-Value="@ShowMenuBox" OnInnerText="菜单栏" OnValueChanged="OnValueChangedByBool" />
                <Switch OnColor="Color.Primary" ShowInnerText="true" DisplayText="属性框" @bind-Value="@ShowPropertityBox" OnValueChanged="OnValueChangedByBool" />
            </div>
            <div style="flex:10">
                <Button Size="Size.ExtraSmall" OnClick="UpMove">上移</Button>
                <Button Size="Size.ExtraSmall" OnClick="DownMove">下移</Button>
                <Button Size="Size.ExtraSmall" OnClick="UpMove">置顶</Button>
                <Button Size="Size.ExtraSmall" OnClick="UpMove">置底</Button>
                <Button Size="Size.ExtraSmall" OnClick="Save">保存</Button>
                <Button Size="Size.ExtraSmall" OnClick="TestRead">测试读取</Button>
            </div>
        </div>
        <div class="content" style="height:95%;overflow:hidden">
            @if (ShowMenuBox)
            {
                <div style="flex:2">
                    <SharedPage.Components.BoxPanel BigScreen="BigScreen"></SharedPage.Components.BoxPanel>

                </div>
            }
            <div  style="flex:8;position:relative;overflow:auto;background-color:#636470" @onclick="async(e)=>{
await JsEcharts.removeClassForSelect();
}">
                <div id="designer" class="main" style="@(BigScreen.Css.ToString())" ondragover="event.preventDefault();"
                     @ondrop="ondropFormBox">
                    <SharedPage.Components.Runing  BigScreen="@BigScreen" IsDesigner="true"></SharedPage.Components.Runing>
                </div>
            </div>
            @if (ShowPropertityBox)
            {
                <div class="PropPanel" style="flex:2">
                    <SharedPage.Components.PropPanel BigScreen="@BigScreen"></SharedPage.Components.PropPanel>
                </div>
            }
        </div>
    </CascadingValue>
</CascadingValue>
@code {
    [Parameter]
    public long id { get; set; }
    [Inject]
    [NotNull]
    public JsInterOp? JsEcharts { get; set; }
    [Inject]
    [NotNull]
    private MessageService? Msg { get; set; }

    public BigScreen BigScreen { get; set; } = new() { InterVal = 1000, IsDesigner = true };

    public List<ComponentInfo> CopyList { get; set; } = new();

    public List<BigScreen>? BigScreens { get; set; }
    public BigScreenDesigner BigScreenDesigner { get; set; } = new();
    public bool ShowPropertityBox { get; set; } = true;
    public bool ShowMenuBox { get; set; } = true;
    protected override async void OnInitialized()
    {
        base.OnInitialized();
        var res = await JsEcharts.getItems<BigScreen>();
        if (res != null)
        {
            BigScreenDesigner.BigScreens = res;
        }
        else
        {
            BigScreenDesigner.BigScreens = new();
        }
        BigScreenDesigner.RefreshHandel = Refresh;
        BigScreenDesigner.SelectedChangeHandel = BigScreenChanged;
        return;
        try
        {
            ComponentInfo chart = new ComponentInfo();
            ComponentInfo chart2 = new ComponentInfo();
            chart.ComponentType = ComponentType.Echarts;
            chart.DataName = "test";
            chart.Option = new EOption()
                {
                    dataset = new EdataSet()
                    {
                        source = new List<object[]>() {
            new object[] {"事件年份",   "系列1",  "系列2", "系列3" }  ,
            new object[] {"2015",       "155",       "66",   "78" }  ,
            new object[] {"2013",       "12",       "145",   "37" }  ,
            new object[] {"2016",       "34",       "65",   "177" }  ,
            new object[] {"2017",       "12",       "425",  "37" } },
                    },

                };
            chart.Option.series = new List<ESerieBase>() { new SeriePie() { type = ESeriesType.line }, new SeriePie() { type = ESeriesType.line }, new SeriePie() { type = ESeriesType.line } };
            chart.Option.xAxis = new() { new ExAxis() { type = EAxisType.category } };
            chart.Option.yAxis = new List<ExAxis>() { new ExAxis() };
            chart.Option.tooltip = new();
            chart.Option.legend = new();

            chart2.DataName = "test";
            chart2.Top = 50;
            chart2.Option = chart.Option;
            chart2.ComponentType = ComponentType.Echarts;
            Random r = new();
            BigScreen.Id = r.Next(10000);
            BigScreen.ChartList.Add(chart);
            //BigScreen.ChartList.Add(chart2);
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
    protected override async Task OnInitializedAsync()
    {

        var res = await BigScreenService.GetBigScreens();
        if (res.IsSucceeded)
        {
            BigScreens = res.Data;
        }
        await base.OnInitializedAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        //根据拿到的id,查询到整个BigScreen
        var res = await BigScreenService.GetBigScreen(id);
        if (res.IsSucceeded && res.Data != null)
        {
            BigScreen = res.Data;
            BigScreen.RefreshHandel = Refresh;
        }
    }
    Random r = new();
    public void init()
    {
        //EChartIntence?.AddData(new object[] { r.Next(2020, 3000), r.Next(100), r.Next(100), r.Next(100) });
    }
    public void UpDate()
    {
        //EChartIntence?.RemoveAndAddData(new object[] { r.Next(2020, 3000), r.Next(100), r.Next(100), r.Next(100) });
    }
    public async void setOption()
    {

        var option = new
        {
            series = new[] { new { name = "xiaoliang", type = "bar", data = new[] { r.Next(100), 20, 36, 10, 10, 20 } } }
        };
        await JsEcharts.SetOption("asdfg", option);
    }

    private Task OnValueChangedByBool(bool val)
    {
        //todo 应该调用js  this.liChart[id].resize();
        return Task.CompletedTask;
    }
    /// <summary>
    /// 强制刷新当前选择的图表
    /// </summary>
    /// <param name="isResize"></param>
    /// <returns></returns>
    public async void Refresh(bool isResize = false)
    {
        //todo 应该调用js  this.liChart[id].resize();
        try
        {
            this.StateHasChanged();
            if (BigScreen.SelectedList.Count > 0 && isResize && BigScreen.SelectedList[0].Id != null)
            {
                await JsEcharts.SetOption(BigScreen.SelectedList[0].Id, BigScreen.SelectedList[0].Option, true);
                await JsEcharts.Resize(BigScreen.SelectedList[0].Id);
            }
        }
        catch (Exception ex)
        {
            ;
        }
    }
    void BigScreenChanged(long id)
    {
        var dp = this.BigScreenDesigner.BigScreens.First(x => x.Id == id);
        if (dp != null)
        {
            this.BigScreenDesigner.Selected = dp;
            this.StateHasChanged();
        }
    }
    private async void DownMove(MouseEventArgs e)
    {
        if (BigScreen.SelectedList.Count == 0)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "请选择一个组件",
                    Color = Color.Danger
                });
        }
        else if (BigScreen.SelectedList.Count > 1)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "不能选择多个组件",
                    Color = Color.Danger
                });
        }
        else
        {
            var res = BigScreen.ChartList.IndexOf(BigScreen.SelectedList[0]);
            if (res != 0)
            {
                BigScreen.ChartList.Swap(res, res - 1);
                this.StateHasChanged();
            }
            else
            {
                await Msg.Show(new MessageOption()
                    {
                        Content = "当前在最底层了",
                        Color = Color.Danger
                    });
            }

        }
    }
    private async void UpMove(MouseEventArgs e)
    {
        if (BigScreen.SelectedList.Count == 0)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "请选择一个组件",
                    Color = Color.Danger
                });
        }
        else if (BigScreen.SelectedList.Count > 1)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "不能选择多个组件",
                    Color = Color.Danger
                });
        }
        else
        {
            var res = BigScreen.ChartList.IndexOf(BigScreen.SelectedList[0]);
            var count = BigScreen.ChartList.Count;
            if (res == count - 1)
            {
                await Msg.Show(new MessageOption()
                    {
                        Content = "当前在最上层了",
                        Color = Color.Danger
                    });

            }
            else
            {
                BigScreen.ChartList.Swap(res, res + 1);
                this.StateHasChanged();
            }

        }
    }
    private async void Save(MouseEventArgs e)
    {
        //获取当前页面的缩略图,然后保存到根目录下  JsHtmlToCanvas 实现了
        Result result = new Result() { IsSucceeded = false };
        if (BigScreen != null)
        {
            result = await BigScreenService.Save(BigScreen);
        }
        if (result.IsSucceeded)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "保存成功",
                    Color = Color.Success
                });
        }
        else
        {
            await Msg.Show(new MessageOption()
                {
                    Content = $"保存失败:{result.ReturnMsg}",
                    Color = Color.Danger
                });
        }

    }
    private async void TestRead(MouseEventArgs e)
    {
        var ss = await JsEcharts.getItem<BigScreen>("大屏");
        await JsEcharts.Log(ss);
        await JsEcharts.Log(null);
    }
    void ondropFormBox(DragEventArgs e)
    {
        if (BigScreen.SelectedByToolBox != null)
        {
            switch (BigScreen.SelectedByToolBox)
            {
                case ComponentType.Echarts:
                    ComponentInfo chart = new ComponentInfo();
                    chart.ComponentType = ComponentType.Echarts;
                    chart.DataName = "test";
                    chart.Option = new EOption()
                        {
                            dataset = new EdataSet()
                            {
                                source = new List<object[]>() {
            new object[] {"事件年份",   "系列1",  "系列2", "系列3" }  ,
            new object[] {"2015",       "155",       "66",   "78" }  ,
            new object[] {"2013",       "12",       "145",   "37" }  ,
            new object[] {"2016",       "34",       "65",   "177" }  ,
            new object[] {"2017",       "12",       "425",  "37" } },
                            },

                        };
                    chart.Option.series = new List<ESerieBase>() { new SeriePie() { type = ESeriesType.line }, new SeriePie() { type = ESeriesType.line }, new SeriePie() { type = ESeriesType.line } };
                    chart.Option.xAxis = new() { new ExAxis() { type = EAxisType.category } };
                    chart.Option.yAxis = new List<ExAxis>() { new ExAxis() };
                    chart.Option.tooltip = new();
                    chart.Option.legend = new();
                    BigScreen.ChartList.Add(chart);
                    break;
            }
        }
        this.StateHasChanged();
    }
}




