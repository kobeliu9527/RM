@using Models
@using SqlSugar
@using System.Diagnostics.CodeAnalysis

<CascadingAuthenticationState>
    <BootstrapBlazorRoot>
        <CascadingValue Value="this.FunctionGroups" Name="router">
            <Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="new System.Reflection.Assembly[]{typeof(Shared.Designer.FormDesigner).Assembly}">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(Shared.Layout.MainLayout)">
                        <NotAuthorized>
                            zhe bu shi yige dizhi
                        </NotAuthorized>
                    </AuthorizeRouteView>
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(Shared.Layout.MainLayout)">
                        <p role="alert">对不起,这个访问地址不存在</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingValue>
    </BootstrapBlazorRoot>
</CascadingAuthenticationState>
@code
{
    public List<FunctionGroup>? FunctionGroups { get; set; }
    public SysModule? SysModule { get; set; }
    public bool MyProperty { get; set; }
    public static bool Isdesigner { get; set; } = true;
    [Inject]
    [NotNull]
    public ISqlSugarClient? db { get; set; }

    public bool IsFirst { get; set; } = true;
    protected override void OnInitialized()
    {
        var res =  db.Queryable<FunctionGroup>().Includes(x => x.FunctionPages).ToList();

        if (res != null)
        {
            FunctionGroups = res;
        }
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
       
        await base.OnInitializedAsync();
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
        return base.OnAfterRenderAsync(firstRender);
    }
}