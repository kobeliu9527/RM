@inject IJSRuntime JSRuntime

<CascadingValue Value="this" Name="Root">
    <div class="d-flex flex-column h-100 w-100">
        <div class="d-flex flex-row h-100 w-100">
            <div class="d-flex flex-column">
                @if (LeftName == "Tbox")
                {
                    <PalettePanel />
                }
            </div>
            <div class="d-flex flex-column flex-grow-1 container-space fd-scrollbar"
            @onclick="@(async () =>
            await SelectComponentAsync(null))"
            @onclick:stopPropagation="true">
                <Container  ContainerData="ContainerData"
                           OnClickCallback="@(async (e) =>
                           await SelectContainerAsync(ContainerData))" />
            </div>
            <div class="d-flex flex-column">
                <FieldPropertiesPanel />
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    /// <summary>
    /// 左侧面板
    /// </summary>
    [Parameter]
    public string? LeftName { get; set; }

    /// <summary>
    /// 跟容器数据
    /// </summary>
    [Parameter]
    public ContainerDto? ContainerData { get; set; }
    /// <summary>
    /// 选中的容器
    /// </summary>
    private ContainerDto? SelectedContainer = null;
    /// <summary>
    /// 选中的控件
    /// </summary>
    private ComponentDto? SelectedComponent = null;
    /// <summary>
    /// 工具箱中正在被拖动的项的数据,ondragstart会触发
    /// </summary>
    private PaletteWidgetDto? DraggedPaletteWidget = null;
    /// <summary>
    /// 设计器中被拖动的项目的Dto数据
    /// </summary>
    private ComponentDto? DraggedComponentData = null;
    /// <summary>
    ///
    /// </summary>
    private RowDto DraggedComponentOriginRow = null;
    /// <summary>
    ///
    /// </summary>
    private ContainerDto DraggedComponentOriginContainer = null;
    /// <summary>
    /// 点击容器后会触发,实际就是给SelectedContainer赋值!(实际点击行也会触发)
    /// </summary>
    /// <param name="containerData"></param>
    /// <returns></returns>
    public async Task SelectContainerAsync(ContainerDto? containerData)
    {
        SelectedContainer = containerData;
        SelectedComponent = null;
        await StateHasChangedAsync();
    }
    public async Task<ContainerDto?> GetSelectedContainerAsync()
    {
        return await Task.FromResult(SelectedContainer);
    }
    public bool IsSelectedContainer(ContainerDto containerData)
    {
        return SelectedContainer != null && SelectedContainer == containerData;
    }
    /// <summary>
    /// 选中设计器中的组件的时候会触发
    /// </summary>
    /// <param name="componentData"></param>
    /// <returns></returns>
    public async Task SelectComponentAsync(ComponentDto? componentData)
    {
        SelectedComponent = componentData;
        SelectedContainer = null;
        await StateHasChangedAsync();
    }
    public async Task<ComponentDto> GetSelectedComponentAsync()
    {
        return await Task.FromResult(SelectedComponent);
    }
    /// <summary>
    /// 判断一个组件是否处于被选中的状态
    /// </summary>
    /// <param name="component"></param>
    /// <returns></returns>
    public bool IsSelectedComponent(ComponentDto? component)
    {
        return SelectedComponent != null && SelectedComponent == component;
    }
    /// <summary>
    /// 工具箱中的工具被开始拖动的时候会触发,然后赋值给 <see cref="DraggedPaletteWidget"/>
    /// </summary>
    /// <param name="draggedPaletteWidget"></param>
    /// <returns></returns>
    public async Task SetDraggedPaletteWidgetAsync(PaletteWidgetDto draggedPaletteWidget)
    {
        DraggedPaletteWidget = draggedPaletteWidget;
        DraggedComponentData = null;
        DraggedComponentOriginRow = null;
        DraggedComponentOriginContainer = null;
        await Task.CompletedTask;
    }
    /// <summary>
    /// 返回工具箱中正在被拖动的项
    /// </summary>
    /// <returns></returns>
    public async Task<PaletteWidgetDto?> GetDraggedPaletteWidgetAsync()
    {
        return await Task.FromResult(DraggedPaletteWidget);
    }
    /// <summary>
    /// 拖动的是设计器中的组件实例:所有设计器中被拖动的Dto不为null,为工具箱中的Dto必须为null
    /// </summary>
    /// <returns></returns>
    public bool IsDraggedItemComponent()
    {
        return DraggedComponentData != null && DraggedPaletteWidget == null;
    }
    /// <summary>
    /// 拖动的是工具箱中的组件
    /// </summary>
    /// <returns></returns>
    public bool IsDraggedItemPaletteWidget()
    {
        return DraggedPaletteWidget != null && DraggedComponentData == null;
    }

    public async Task SetDraggedComponentAsync(ComponentDto draggedComponentData,
        RowDto draggedComponentOriginRow, ContainerDto draggedComponentOriginContainer)
    {
        DraggedComponentData = draggedComponentData;
        DraggedComponentOriginRow = draggedComponentOriginRow;
        DraggedComponentOriginContainer = draggedComponentOriginContainer;
        DraggedPaletteWidget = null;
        await Task.CompletedTask;
    }
    public async Task<ComponentDto?> GetDraggedComponentDataAsync()
    {
        return await Task.FromResult(DraggedComponentData);
    }
    public async Task<RowDto> GetDraggedComponentOriginRowAsync()
    {
        return await Task.FromResult(DraggedComponentOriginRow);
    }
    public async Task<ContainerDto> GetDraggedComponentOriginContainerAsync()
    {
        return await Task.FromResult(DraggedComponentOriginContainer);
    }
  
    /// <summary>
    /// 刷新整个页面
    /// </summary>
    /// <returns></returns>
    public async Task StateHasChangedAsync()
    {
        StateHasChanged();
        await Task.CompletedTask;
    }

}
