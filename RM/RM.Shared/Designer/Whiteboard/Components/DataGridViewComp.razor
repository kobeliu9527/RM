@using System.Data;
@inherits WidgetComponentBase
@if (Component != null)
{
    <Table ShowToastAfterSaveOrDeleteModel="false" EditMode="EditMode.EditForm" TItem="DynamicObject" DynamicContext="DataTableDynamicContext" ModelEqualityComparer="ModelEqualityComparer"
           IsMultipleSelect="true" IsBordered="true" IsStriped="true"

           EditDialogCloseAsync="async (e,ee)=>{
await Task.FromResult(true);
}" 
            OnSaveAsync="(q,w)=>{
    return Task.FromResult(true);

    }" OnAfterSaveAsync="(e)=>{
    return Task.FromResult(true);}"
           OnEditAsync="(e)=>{

    return Task.FromResult(true);}"
           ShowToolbar="true" ShowExtendButtons="true" SelectedRowsChanged="SelectedRowsChanged" />

}
@code {
    [NotNull]
    private DataTableDynamicContext? DataTableDynamicContext { get; set; }
    private DataTable UserData { get; } = new DataTable();
    private static bool ModelEqualityComparer(IDynamicObject x, IDynamicObject y) => x.GetValue("Id")?.ToString() == y.GetValue("Id")?.ToString();

    /// <summary>
    /// OnInitialized 方法
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();



        // 初始化 DataTable
        InitDataTable();
        // 初始化分页表格
        //  InitPageDataTable();
    }
    private async void SelectedRowsChanged(List<DynamicObject> obj)
    {
        if (obj.Count <= 0)
        {
            return;
        }
        var o = obj.First();
        foreach (DataColumn item in UserData.Columns)
        {
            var name = (item.ColumnName);
            var ss = o.GetValue(item.ColumnName);
            var ssss = Component.Parameters;
            var c = FormDesigner.ContainerData.FindFirst(x => x.Type == ComponentType.SingleLine);
            c.ValueInfo.StringValue = DateTime.Now.ToString();
            await FormDesigner.StateHasChangedAsync();

        }
        foreach (var item in obj)
        {
            var ss = item;

        }
    }
    private void CreateContext()
    {
        // 初始化动态类型上下文实例
        DataTableDynamicContext = new DataTableDynamicContext(UserData, (context, col) =>
        {
            
            var propertyName = col.GetFieldName();
            if (propertyName == nameof(Foo.DateTime))
            {
                context.AddRequiredAttribute(nameof(Foo.DateTime));
                // 使用 AutoGenerateColumnAttribute 设置显示名称示例
                //   context.AddAutoGenerateColumnAttribute(nameof(Foo.DateTime), new KeyValuePair<string, object?>[] { new(nameof(AutoGenerateColumnAttribute.Text), Localizer[nameof(Foo.DateTime)].Value) });
            }
            else if (propertyName == nameof(Foo.Name))
            {
                // context.AddRequiredAttribute(nameof(Foo.Name), Localizer["Name.Required"]);
                // 使用 Text 设置显示名称示例
                col.Text = nameof(Foo.Name);
            }
            else if (propertyName == nameof(Foo.Count))
            {
                context.AddRequiredAttribute(nameof(Foo.Count));
                // 使用 DisplayNameAttribute 设置显示名称示例
                context.AddDisplayNameAttribute(nameof(Foo.Count), nameof(Foo.Count));
            }
            else if (propertyName == nameof(Foo.Complete))
            {
                col.Filterable = true;
                // 使用 DisplayAttribute 设置显示名称示例
                //  context.AddDisplayAttribute(nameof(Foo.Complete), new KeyValuePair<string, object?>[] { new(nameof(DisplayAttribute.Name), Localizer[nameof(Foo.Complete)].Value) });
            }
            else if (propertyName == nameof(Foo.Id))
            {
                col.Editable = false;
                col.Visible = false;
            }
        })
            {
                OnDeleteAsync = items =>
                {
                    // 数据源中移除
                    foreach (var item in items)
                    {
                        var id = item.GetValue(nameof(Foo.Id));
                        if (id != null)
                        {
                            var row = UserData.Rows.Find(id);
                            if (row != null)
                            {
                                UserData.Rows.Remove(row);
                            }
                        }
                    }

                    UserData.AcceptChanges();
                    return Task.FromResult(true);
                },
                OnChanged = args =>
                {
                    if (args.ChangedType == DynamicItemChangedType.Add)
                    {
                        var item = args.Items.First();
                        item.SetValue(nameof(Foo.DateTime), DateTime.Today);
                        item.SetValue(nameof(Foo.Name), "新建值");
                    }

                    return Task.FromResult(true);
                }
                //,
                //OnValueChanged=(e,r,t)=>
                //{
                //    return Task.CompletedTask;    
                //}

            };
          
    }

    private void InitDataTable()
    {
        UserData.Columns.Add(nameof(Foo.Id), typeof(int));
        UserData.Columns.Add(nameof(Foo.DateTime), typeof(DateTime));
        UserData.Columns.Add(nameof(Foo.Name), typeof(string));
        UserData.Columns.Add(nameof(Foo.Count), typeof(int));
        UserData.PrimaryKey = new DataColumn[]
        {
            UserData.Columns[0]
        };
        UserData.Columns[0].AutoIncrement = true;

        UserData.Rows.Add(1, DateTime.Now, "df1", 12);
        UserData.Rows.Add(2, DateTime.Now, "df2", 121);
        UserData.Rows.Add(3, DateTime.Now, "df3", 122);

        CreateContext();
    }
}
