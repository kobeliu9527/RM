@page "/WorkFlowDesigner"
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Models
@using Models.Dto.SVG
@using Shared.Components.Svg
<CascadingValue Value="this" Name="Root">
    <div style="height:100%;width:100%;display:flex">
        @if (1 == 1)
        {
            <div class="dmain-left" style="width:20%">
                @* <div class="fd-field-properties-panel h-100 ppp"> *@
                <Tab>
                    <TabItem Text="模板清单">
                        <Table TItem="WorkFlowTemplate"
                               ShowExtendButtons="true" ShowExtendEditButton="true"
                               ShowToolbar="true"
                               ClickToSelect="true"
                               IsExtendButtonsInRowHeader="true"
                               IsStriped="true" IsBordered="true" IsMultipleSelect="false"
                               OnSaveAsync="OnSaveAsync"
                               OnQueryAsync="OnQueryAsync"
                               OnAddAsync="OnAddAsync"
                               OnDeleteAsync="OnDeleteAsync"
                               OnClickRowCallback="OnClickRowCallbackProduct"
                               AutoGenerateColumns="true">
                        </Table>
                    </TabItem>
                    <TabItem Text="设计器">
                        <NodeWidetPanel OnDragStart="OnDragStartWithWidetPanel"></NodeWidetPanel>
                    </TabItem>

                </Tab>
                @* </div> *@
            </div>
        }
        <div class="dmain-main" style="width:80%">
            @if (WorkFlowTemplate != null)
            {
                <div class="container-content" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
                    <CascadingValue Value="_blazorDiagram">
                        <DiagramCanvas>
                            <Widgets>
                                <SelectionBoxWidget />
                            </Widgets>
                        </DiagramCanvas>
                    </CascadingValue>
                </div>
            }
        </div>
        @if (1 == 1)
        {
            <div class="dmain-right" style="width:20%">
                <Tab>
                    <TabItem Text="属性">
                        @if (SelectedNode != null)
                        {
                            <BootstrapInput TValue="string" @bind-Value="@SelectedNode.AppearanceInfo.NodeModelName" OnValueChanged="OnChangeString" UseInputEvent="true" ShowLabel="true" DisplayText="流程名"></BootstrapInput>
                            <BootstrapInput TValue="string" OnValueChanged="OnChangeString" ShowLabel="true" DisplayText="流程详情"></BootstrapInput>
                            <BootstrapInputNumber TValue="int" @bind-Value="@SelectedNode.AppearanceInfo.Corner" ShowLabel="true" OnValueChanged="async (e)=>{await RefreshInvoke();}"></BootstrapInputNumber>
                            <BootstrapInputNumber TValue="double" @bind-Value="@SelectedNode.AppearanceInfo.Width" ShowLabel="true" OnValueChanged="async (e)=>{await RefreshInvoke();}"></BootstrapInputNumber>
                            <BootstrapInputNumber TValue="double" @bind-Value="@SelectedNode.AppearanceInfo.Height" ShowLabel="true" OnValueChanged="async (e)=>{await RefreshInvoke();}"></BootstrapInputNumber>
                            <Button OnClick="SaveSelect">保存</Button>
                            @switch (SelectedNode.AppearanceInfo.NodeType)
                            {
                                case NodeType.Square:
                                    
                                    break;
                                case NodeType.Diamond:
                                    break;
                                case NodeType.Ellipse:
                                    break;
                                case NodeType.Appoint:
                                    break;
                                case NodeType.Other:
                                    break;
                                default:
                                    break;
                            }
                        }
                        else if(SelectedLink!=null)
                        {
                            <Button OnClick="()=>{ AddLinkLabel(SelectedLink);}">增加标签</Button>
                            @foreach (var item in SelectedLink.Labels)
                            {
                                <div class="input-n">
                                    <BootstrapInput TValue="string" @bind-Value=@item.Content OnValueChanged="(e)=>{return RefreshInvoke();}" UseInputEvent="true" ShowLabel="true" DisplayText="标签名"></BootstrapInput>
                                </div>
                                <div class="input-n">
                                    <BootstrapInputNumber @bind-Value="@item.Distance" TValue="double?" Step="10" Max="500" Min="0" ShowButton="true" ShowLabel="true" OnValueChanged="(e)=>{return RefreshInvoke();}"></BootstrapInputNumber>
                                </div>
                            }
                        }
                        
                    </TabItem>
                </Tab>
            </div>

        }
    </div>
</CascadingValue>


