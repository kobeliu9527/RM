@using SharedPage.Page
@inherits SharedPage.Base.EchartsBase
@implements IAsyncDisposable
@if (ChartInfo != null)
{
    if (@IsDesigner)
    {
        <div class="dragbox" tabindex="0" style="position:absolute; height:@ChartInfo.Height%;width:@ChartInfo.Width%;top:@ChartInfo.Top%;left:@ChartInfo.Left%" draggable="true"
        @onclick:stopPropagation @oncontextmenu:stopPropagation @oncontextmenu:preventDefault
             @ondragstart="(e)=>{
            ChartInfo.MoveInfo.StartX=e.ScreenX;
            ChartInfo.MoveInfo.StartY=e.ScreenY;
        }" @onmousemove="async(e)=>{

        }" @ondragend="HandleDragend"
             @onclick=" async(e)=>{
            if (e.CtrlKey)
            {
                if (BigScreen.SelectedList.Find(x=>x.Id==ChartInfo.Id)==null)
                {
                    BigScreen.SelectedList.Add(ChartInfo);
                }
            }
            else
            {
                BigScreen.SelectedList.Clear();
                BigScreen.SelectedList.Add(ChartInfo);
                await JsEcharts.removeClassForSelect();
            }
            await JsEcharts.addClassForSelect(ChartInfo.Id);
            await  Designer.Refresh();


        }" @onkeydown="HandleKeyDown"
             @oncontextmenu="async(e)=>{
            //调用js程序,将一个右键组件显示出来,通过display属性
          //await JsEcharts.Log(e);
        }">
            <div id="@ChartInfo.Id" style="height:100%;width:100%"></div>
        </div>
    }
    else
    {
        <div id="@ChartInfo.Id" style="position:absolute;height:@ChartInfo.Height%;width:@ChartInfo.Width%;top:@ChartInfo.Top%;left:@ChartInfo.Left%"></div>
    }
}
@code {
    [CascadingParameter(Name = "BigScreen")]
    [NotNull]
    public BigScreen? BigScreen { get; set; }

    [CascadingParameter(Name = "Designer")]
    [NotNull]
    public Designer? Designer { get; set; }

    [Parameter]
    [NotNull]
    public ComponentInfo? ChartInfo { get; set; } = new();

    [Parameter]
    public bool IsDesigner { get; set; }

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }
    Random r = new();
    public async void SetOption()
    {
        await JsEcharts.SetOption(ChartInfo.Id, ChartInfo.Option);
        await InvokeAsync(this.StateHasChanged);
    }

    public async void AddData(object[] data)
    {

        ChartInfo.Option?.dataset?.source?.Add(data);
        await JsEcharts.SetOption(ChartInfo.Id, ChartInfo.Option);
    }
    public async void RemoveData()
    {
        ChartInfo.Option?.dataset?.source?.RemoveAt(0);
        await JsEcharts.SetOption(ChartInfo.Id, ChartInfo.Option);
    }
    public async void RemoveAndAddData(object[] data)
    {
        ChartInfo.Option?.dataset?.source?.RemoveAt(0);
        ChartInfo.Option?.dataset?.source?.Add(data);
        await JsEcharts.SetOption(ChartInfo.Id, ChartInfo.Option);
    }
    async Task HandleDragend(DragEventArgs e)
    {
        var ss = await JsEcharts.getWH("designer");
        var w = ss[0];
        var h = ss[1];
        var offsetx = e.ScreenX - ChartInfo.MoveInfo.StartX;
        var offsety = e.ScreenY - ChartInfo.MoveInfo.StartY;
        ChartInfo.Top = ChartInfo.Top + Convert.ToSingle((offsety / h * 100));
        ChartInfo.Left = ChartInfo.Left + Convert.ToSingle((offsetx / w * 100));
        await Designer.Refresh();
    }
    async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp":
                BigScreen.SelectedList.ForEach(x => x.Top--);
                break;
            case "ArrowDown":
                BigScreen.SelectedList.ForEach(x => x.Top++);
                break;
            case "ArrowLeft":
                BigScreen.SelectedList.ForEach(x => x.Left--);
                break;
            case "ArrowRight":
                BigScreen.SelectedList.ForEach(x => x.Left++);
                break;
            case "Delete":
                var ss = BigScreen.ChartList.FindAll(x => BigScreen.SelectedList.Contains(x));
                ss.ForEach(async (x) =>
                {
                    await JsEcharts.dispose(x.Id);
                });
                BigScreen.ChartList.RemoveAll(x => BigScreen.SelectedList.Contains(x));
                BigScreen.SelectedList.Clear();
                await Designer.Refresh();
                break;
            case "c":
            case "C":
                if (e.CtrlKey && BigScreen.SelectedList.Count > 0)
                {
                    var obj = BigScreen.SelectedList.Select(x => x.Clone());
                    Designer.CopyList.Clear();
                    Designer.CopyList.AddRange(obj);
                }
                break;
            case "v":
            case "V":
                if (e.CtrlKey && Designer.CopyList.Count > 0)
                {
                    //BigScreen.SelectedList.Clear();
                    var json = JsonSerializer.Serialize(Designer.CopyList);
                    var objs = JsonSerializer.Deserialize<List<ComponentInfo>>(json);
                    objs.ForEach(x => x.Id = Guid.NewGuid().ToString());
                    BigScreen.ChartList.AddRange(objs);
                    await Designer.Refresh();
                }
                break;

        }
        if (BigScreen.SelectedList.Count > 1)
        {
            await Designer.Refresh();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JsEcharts.Init(ChartInfo.Id);
            await JsEcharts.SetOption(ChartInfo.Id, ChartInfo.Option);
            await JsEcharts.addResizeListener(ChartInfo.Id);
            ChartInfo.SetOption = SetOption;
        }

    }
    public async ValueTask DisposeAsync()
    {
        await JsEcharts.removeResizeListener(ChartInfo.Id);
        GC.SuppressFinalize(this);
    }

}
