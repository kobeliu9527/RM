@page "/"
@using Microsoft.JSInterop
@layout SharedPage.Layout.BaseLayout

<CascadingValue Value="this" Name="Designer">
    <CascadingValue Value="@BigScreen" Name="BigScreen">
        <div style="height:5%;display:flex;justify-content: flex-start; ">
            <div style="flex:2;display:flex">
                <Switch OnColor="Color.Primary" ShowInnerText="true" DisplayText="菜单栏" @bind-Value="@ShowMenuBox" OnInnerText="菜单栏" OnValueChanged="OnValueChangedByBool" />
                <Switch OnColor="Color.Primary" ShowInnerText="true" DisplayText="属性框" @bind-Value="@ShowPropertityBox" OnValueChanged="OnValueChangedByBool" />
            </div>
            <div style="flex:10">
                <Button Size="Size.ExtraSmall" OnClick="UpMove">上移</Button>
                <Button Size="Size.ExtraSmall" OnClick="DownMove">下移</Button>
                <Button Size="Size.ExtraSmall" OnClick="UpMove">置顶</Button>
                <Button Size="Size.ExtraSmall" OnClick="UpMove">置底</Button>
            </div>
        </div>
        <div class="content" style="height:95%;overflow:hidden">
            @if (ShowMenuBox)
            {
                <div style="flex:2">左边</div>
            }
            <div id="designer" style="flex:8;position:relative;overflow:auto" @onclick="async(e)=>{
await JsEcharts.removeClassForSelect();
}">
                <SharedPage.Components.Runing></SharedPage.Components.Runing>
            </div>
            @if (ShowPropertityBox)
            {
                <SharedPage.Components.PropPanel></SharedPage.Components.PropPanel>
            }

        </div>
    </CascadingValue>
</CascadingValue>
@code {
    [Inject]
    [NotNull]
    public JsEcharts? JsEcharts { get; set; }
    [Inject]
    [NotNull]
    private MessageService? Msg { get; set; }

    public BigScreen BigScreen { get; set; } = new() { InterVal = 1000, IsDesigner = true };

    public List<ComponentInfo> CopyList { get; set; } = new();

    public bool ShowPropertityBox { get; set; } = true;
    public bool ShowMenuBox { get; set; } = true;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            ComponentInfo chart = new ComponentInfo();
            ComponentInfo chart2 = new ComponentInfo();
            chart.ComponentType = ComponentType.Echarts;
            chart.DataName = "test";
            chart2.DataName = "test";
            chart.Option = new EOption()
                {
                    dataset = new EdataSet()
                    {
                        source = new List<object[]>() {
            new object[] {"2014", "12", "23", "45" }  ,
            new object[] {"2015", "55", "66", "78" }  ,
            new object[] {"2013", "12", "45", "37" }  ,
            new object[] {"2016", "34", "65", "77" }  ,
            new object[] {"2017", "12", "425", "37" } },
                        dimensions = new List<EDimension>()
        {
            new EDimension(){  name="啊手动阀"},
            new EDimension(){  name="第一列"},
            new EDimension(){  name="第二列"},
            new EDimension(){  name="第三列"},
        },
                        sourceHeader = false
                    }
                };
            chart.Option.series = new List<ESerie>() { new ESerie() { type = "bar" }, new ESerie() { type = "line" }, new ESerie() { type = "bar" } };
            chart2.Top = 50;
            chart2.Option = chart.Option;
            chart2.ComponentType = ComponentType.Echarts;
            BigScreen.ChartList.Add(chart);
            BigScreen.ChartList.Add(chart2);
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    Random r = new();
    public void init()
    {
        //EChartIntence?.AddData(new object[] { r.Next(2020, 3000), r.Next(100), r.Next(100), r.Next(100) });
    }
    public void UpDate()
    {
        //EChartIntence?.RemoveAndAddData(new object[] { r.Next(2020, 3000), r.Next(100), r.Next(100), r.Next(100) });
    }
    public async void setOption()
    {

        var option = new
        {
            //title = new { text = "ECharts入门示例" },
            //tooltip = new { },
            //xAxis = new { data = new object[] { "adsf", "adsfasdf", "啊手动阀", "啊手动阀2", "啊手动阀3" } },
            //yAxis = new { },
            series = new[] { new { name = "xiaoliang", type = "bar", data = new[] { r.Next(100), 20, 36, 10, 10, 20 } } }
        };
        await JsEcharts.SetOption("asdfg", option);
    }

    private Task OnValueChangedByBool(bool val)
    {
        //todo 应该调用js  this.liChart[id].resize();
        return Task.CompletedTask;
    }
    public async Task Refresh(bool isResize = false)
    {
        //todo 应该调用js  this.liChart[id].resize();
        this.StateHasChanged();
        if (BigScreen.SelectedList.Count > 0 && isResize && BigScreen.SelectedList[0].Id != null)
        {
            await JsEcharts.SetOption(BigScreen.SelectedList[0].Id, BigScreen.SelectedList[0].Option);
            await JsEcharts.Resize(BigScreen.SelectedList[0].Id);
        }
        await Task.CompletedTask;

    }
    
    private async void DownMove(MouseEventArgs e)
    {
        if (BigScreen.SelectedList.Count == 0)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "请选择一个组件",
                    Color = Color.Danger
                });
        }
        else if (BigScreen.SelectedList.Count > 1)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "不能选择多个组件",
                    Color = Color.Danger
                });
        }
        else
        {
            var res = BigScreen.ChartList.IndexOf(BigScreen.SelectedList[0]);
            if (res!=0)
            {
                BigScreen.ChartList.Swap(res, res-1);
                this.StateHasChanged();
            }
            else
            {
                await Msg.Show(new MessageOption()
                    {
                        Content = "当前在最底层了",
                        Color = Color.Danger
                    });
            }
            
        }
    }
    private async void UpMove(MouseEventArgs e)
    {
        if (BigScreen.SelectedList.Count == 0)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "请选择一个组件",
                    Color = Color.Danger
                });
        }
        else if (BigScreen.SelectedList.Count > 1)
        {
            await Msg.Show(new MessageOption()
                {
                    Content = "不能选择多个组件",
                    Color = Color.Danger
                });
        }
        else
        {
            var res = BigScreen.ChartList.IndexOf(BigScreen.SelectedList[0]);
            var count = BigScreen.ChartList.Count;
            if (res == count-1)
            {
                await Msg.Show(new MessageOption()
                    {
                        Content = "当前在最上层了",
                        Color = Color.Danger
                    });
                
            }
            else
            {
                BigScreen.ChartList.Swap(res, res + 1);
                this.StateHasChanged();
            }

        }
    }
}




